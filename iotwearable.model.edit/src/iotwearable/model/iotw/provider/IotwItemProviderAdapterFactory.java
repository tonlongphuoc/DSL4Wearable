/**
 */
package iotwearable.model.iotw.provider;

import iotwearable.model.iotw.util.IotwAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IotwItemProviderAdapterFactory extends IotwAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IotwItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.DataExplorer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataExplorerItemProvider dataExplorerItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.DataExplorer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataExplorerAdapter() {
		if (dataExplorerItemProvider == null) {
			dataExplorerItemProvider = new DataExplorerItemProvider(this);
		}

		return dataExplorerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.StateSchema} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateSchemaItemProvider stateSchemaItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.StateSchema}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateSchemaAdapter() {
		if (stateSchemaItemProvider == null) {
			stateSchemaItemProvider = new StateSchemaItemProvider(this);
		}

		return stateSchemaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.ArduinoUNOR3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArduinoUNOR3ItemProvider arduinoUNOR3ItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.ArduinoUNOR3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArduinoUNOR3Adapter() {
		if (arduinoUNOR3ItemProvider == null) {
			arduinoUNOR3ItemProvider = new ArduinoUNOR3ItemProvider(this);
		}

		return arduinoUNOR3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.Connection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionItemProvider connectionItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.Connection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionAdapter() {
		if (connectionItemProvider == null) {
			connectionItemProvider = new ConnectionItemProvider(this);
		}

		return connectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.Keypad4x4} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Keypad4x4ItemProvider keypad4x4ItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.Keypad4x4}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeypad4x4Adapter() {
		if (keypad4x4ItemProvider == null) {
			keypad4x4ItemProvider = new Keypad4x4ItemProvider(this);
		}

		return keypad4x4ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.LED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEDItemProvider ledItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.LED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEDAdapter() {
		if (ledItemProvider == null) {
			ledItemProvider = new LEDItemProvider(this);
		}

		return ledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.I2CLCD2004} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I2CLCD2004ItemProvider i2CLCD2004ItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.I2CLCD2004}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI2CLCD2004Adapter() {
		if (i2CLCD2004ItemProvider == null) {
			i2CLCD2004ItemProvider = new I2CLCD2004ItemProvider(this);
		}

		return i2CLCD2004ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.Buzzer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuzzerItemProvider buzzerItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.Buzzer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuzzerAdapter() {
		if (buzzerItemProvider == null) {
			buzzerItemProvider = new BuzzerItemProvider(this);
		}

		return buzzerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.StateFrame} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateFrameItemProvider stateFrameItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.StateFrame}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateFrameAdapter() {
		if (stateFrameItemProvider == null) {
			stateFrameItemProvider = new StateFrameItemProvider(this);
		}

		return stateFrameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.Decision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionItemProvider decisionItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.Decision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionAdapter() {
		if (decisionItemProvider == null) {
			decisionItemProvider = new DecisionItemProvider(this);
		}

		return decisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.StartPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartPointItemProvider startPointItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.StartPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartPointAdapter() {
		if (startPointItemProvider == null) {
			startPointItemProvider = new StartPointItemProvider(this);
		}

		return startPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.EndPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndPointItemProvider endPointItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.EndPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndPointAdapter() {
		if (endPointItemProvider == null) {
			endPointItemProvider = new EndPointItemProvider(this);
		}

		return endPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.BluetoothHC06} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BluetoothHC06ItemProvider bluetoothHC06ItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.BluetoothHC06}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBluetoothHC06Adapter() {
		if (bluetoothHC06ItemProvider == null) {
			bluetoothHC06ItemProvider = new BluetoothHC06ItemProvider(this);
		}

		return bluetoothHC06ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.WifiESP8266} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WifiESP8266ItemProvider wifiESP8266ItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.WifiESP8266}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWifiESP8266Adapter() {
		if (wifiESP8266ItemProvider == null) {
			wifiESP8266ItemProvider = new WifiESP8266ItemProvider(this);
		}

		return wifiESP8266ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link iotwearable.model.iotw.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link iotwearable.model.iotw.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataExplorerItemProvider != null) dataExplorerItemProvider.dispose();
		if (stateSchemaItemProvider != null) stateSchemaItemProvider.dispose();
		if (arduinoUNOR3ItemProvider != null) arduinoUNOR3ItemProvider.dispose();
		if (connectionItemProvider != null) connectionItemProvider.dispose();
		if (keypad4x4ItemProvider != null) keypad4x4ItemProvider.dispose();
		if (ledItemProvider != null) ledItemProvider.dispose();
		if (i2CLCD2004ItemProvider != null) i2CLCD2004ItemProvider.dispose();
		if (bluetoothHC06ItemProvider != null) bluetoothHC06ItemProvider.dispose();
		if (wifiESP8266ItemProvider != null) wifiESP8266ItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (buzzerItemProvider != null) buzzerItemProvider.dispose();
		if (stateFrameItemProvider != null) stateFrameItemProvider.dispose();
		if (decisionItemProvider != null) decisionItemProvider.dispose();
		if (startPointItemProvider != null) startPointItemProvider.dispose();
		if (endPointItemProvider != null) endPointItemProvider.dispose();
	}

}
